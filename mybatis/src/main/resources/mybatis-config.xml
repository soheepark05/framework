<?xml version="1.0" encoding="UTF-8"?>
<!-- 메인 환경설정 파일 : 어떤db를 연결할지 어떤 sql을 실행할지 경로, 어떤 쿼리문을 가질지, 어떤 클래스 이름을 지을지... -->
<!-- Mybatis 설정 파일임을 선언 -->
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
  
<!-- Mybatis 설정과 관련된 기본 설정들을 선언하는 영역 -->
<configuration> <!-- 최상위 태그를 작성하고 내부에 필요한 설정들을 작성하면 된다. -->
	<!-- DB 연결정보를 외부 properties 파일에서 불러오기 위해 선언하는 영역 -->
	<properties resource="driver.properties"/> <!-- 외부 properties파일의 내용을 불러올때 사용한다. -->
	<!-- 예시 : properties resource ="경로 + 파일명.properties" -->
	<!-- 예시 2 : properties name = "key명" value = "설정값" -->
	<settings> 
		<!-- settings 태그 : mybatis 구동시에 선언할 설정들을 작성하는 태그 -->
		<!-- 파라미터의 null 값에 대한 JDBC 타입을 지정한다. -->
		<setting name="jdbcTypeForNull" value="NULL"/>
		<!-- Null값이 발생할 경우 빈칸이 아닌 null로 인식한다. -->
		<!-- https://mybatis.org/mybatis-3/ko/configuration.html 속성값 참조 -->
	</settings>
	
	<!-- VO/DTO 객체의 타입에 별칭을 선언하는 영역이다. 타입에 별칭을 지어줌. -->
	<!-- mybatis에서 사용할 자료형의 별칭을 선언하는 태그 -->
	<!-- 모든 주소 다 쓸 필요없이 이제 member라는 별칭으로만 사용할 수 있게 해준다. -->
	<!-- type에는 패키지 명까지 모두 기술해주어야한다. -->
	<typeAliases> 
		<typeAlias type="com.kh.mybatis.member.model.vo.Member" alias="Member"/>
		<typeAlias type="com.kh.mybatis.board.model.vo.Board" alias="Board"/>
		<typeAlias type="com.kh.mybatis.board.model.vo.Reply" alias="Reply"/>
	</typeAliases>
	
	<!-- 
		Database에 연결할 설정 정보들을 선언하는 영역 
		
		default 속성
			Database에 연결 설정을 여러 개 생성할 수 있는데 그 중에서 기본으로 연결할 설정 정보를 지정하는 속성이다.
	-->
	<!-- environments 태그 : mybatis에서 연동할 database 정보를 등록하는 태그 -->
	<!-- environment id를 구분하여 연결할 DB 여러개 구성할 수 있다. -->
	<environments default="STS3"> <!-- mybatis에서 연동할 DB정보를 등록하는 태그 웹으로  --> 
		<environment id="STS3">
			<!-- 
				type 속성 
					JDBC : JDBC가 commit, rollback을 직접 사용 가능하도록 하는 옵션
					MANAGED : JDBC가 트랜잭션에 대해 어떠한 영향도 행사하지 않는 옵션	
			-->
			<transactionManager type="JDBC"/>
			
			<!-- 
				실제 DB 접속에 관한 정보를 넣는 태그
				
				type 속성
					POOLED : 커넥션 객체를 미리 만들어서 POOL에 저장해서 사용하는 설정, 객체 만드는데 시간을 줄일 수 있다.
					UNPOOLED : DB 요청이 올 때마다 커넥션 객체를 만들고 사용이 끝나면 닫는 설정, 
					           커넥션 객체를 미리 만들어놓는 설정이 아니므로 상대적으로 느릴 수 있다.
			 -->
			<dataSource type="POOLED">
				<!-- 
						datatype = "POOLED" 
						property name="명칭" value="${properties에 설정된 key명}"/
				 -->
			
				<!-- 
				<property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
				<property name="username" value="STS3"/>
				<property name="password" value="STS3"/>
				 -->
				<property name="driver" value="${db.driver}"/>
				<property name="url" value="${db.url}"/>
				<property name="username" value="${db.username}"/>
				<property name="password" value="${db.password}"/>
			</dataSource>
		</environment>
		
		<environment id="STS3">
			<transactionManager type="JDBC"/>
		
			<dataSource type="POOLED">
				<property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
				<property name="username" value="STS3"/>
				<property name="password" value="STS3"/>
			</dataSource>
		</environment>
		
		<!-- 
		
		<environment id="student">
		</environment>
		
		-->
	</environments>
	
	<!-- DB에서 사용하는 쿼리문들을 담는 mapper 파일을 등록하는 영역 / mapper에서 쓰려면 이걸 태그해야함.-->
	<!-- 사용하고자 하는 쿼리문이 정의된 mapper 파일을 등록하는 태그 -->
	
	<mappers>
		<mapper resource="mappers/member/member-mapper.xml"/>
		<mapper resource="mappers/board/board-mapper.xml"/>
	</mappers>
</configuration>